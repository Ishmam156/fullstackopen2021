{"version":3,"sources":["reducers/notificationReducer.js","services/blogs.js","components/Blog.js","components/Notification.js","services/login.js","components/Login.js","components/Togglable.js","components/CreateBlog.js","App.js","store.js","index.js"],"names":["timeout","baseUrl","token","BlogService","getAll","a","axios","get","response","data","setToken","newToken","submitBlog","newBlog","config","headers","Authorization","post","updateBlog","id","put","deleteBlog","delete","Blog","blog","blogs","setBlogs","useState","visible","setVisible","showDetails","display","handleLike","user","likes","updatedBlog","name","username","map","loggedUserJSON","JSON","parse","window","localStorage","getItem","handleDelete","confirm","title","author","blogService","filter","newblog","style","paddingTop","paddingLeft","border","borderWidth","marginBottom","onClick","className","url","Notification","message","useSelector","state","messageType","includes","Login","login","credentials","setNotification","time","dispatch","clearTimeout","setTimeout","type","reducer","action","LoginForm","setUser","password","setUsername","setPassword","useDispatch","handleLogin","event","preventDefault","loginService","loggedIn","setItem","stringify","onSubmit","value","onChange","target","Togglable","React","forwardRef","props","ref","hideWhenVisible","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","displayName","CreateBlog","setMessage","setMessageType","clearForm","setTitle","setAuthor","setUrl","handeSubmit","submmitedBlog","currentUser","concat","current","App","useEffect","then","handleLogout","removeItem","blogFormRef","useRef","sort","b","reverse","store","createStore","notificationReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.796b0b7c.chunk.js","sourcesContent":["const initialState = ''\n\nconst reducer = (state=initialState, action) => {\n  switch (action.type) {\n  case 'ADD_NOTIFICATION':\n    return action.data\n  case 'RESET_NOTIFICATION':\n    return initialState\n  default:\n    return state\n  }\n}\n\nexport const addNotification = ( data ) => {\n  return({\n    type : 'ADD_NOTIFICATION',\n    data\n  })\n}\n\nexport const resetNotification = () => {\n  return({\n    type : 'RESET_NOTIFICATION'\n  })\n}\n\nlet timeout\nexport const setNotification = (message, time) => {\n  return async dispatch => {\n    if (timeout) {\n      clearTimeout(timeout)\n      timeout = null\n    }\n    timeout = setTimeout(() => {\n      dispatch(resetNotification())\n    }, time)\n    await dispatch(addNotification(message))\n  }\n}\n\nexport default reducer","import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst submitBlog = async (newBlog) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.post(baseUrl, newBlog, config)\n  return response.data\n}\n\nconst updateBlog = async (id, newBlog) => {\n\n  const response = await axios.put(`${baseUrl}/${id}`, newBlog)\n  return response.data\n\n  // try {\n  //   const response = await axios.put(`${baseUrl}/${id}`, newBlog)\n  //   return response.data\n  // } catch (error) {\n  //   return console.log(error)\n  // }\n\n}\n\nconst deleteBlog = async (id) => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.delete(`${baseUrl}/${id}`, config)\n  return response.data\n}\n\nconst BlogService = {\n  getAll,\n  setToken,\n  submitBlog,\n  updateBlog,\n  deleteBlog\n}\n\nexport default BlogService","import React, { useState } from 'react'\nimport blogService from '../services/blogs'\nimport PropTypes from 'prop-types'\n\nconst Blog = ({ blog, blogs, setBlogs, updateBlog }) => {\n\n  const [visible, setVisible] = useState(false)\n\n  const Blogstyle = {\n    paddingTop: 10,\n    paddingLeft: 2,\n    border: 'solid',\n    borderWidth: 1,\n    marginBottom: 5\n  }\n\n  const showDetails = { display : visible ? '' : 'none' }\n\n  const toggleVisibility = () => setVisible(!visible)\n\n  const handleLike = async () => {\n    // Creating newBlog ready for update\n    let newBlog = { ...blog }\n    newBlog.user = blog.user.id\n    newBlog.likes += 1\n    delete newBlog.id\n\n    // Updating blog\n    const updatedBlog = await updateBlog(blog.id, newBlog)\n\n    // Add user information to new updated blog\n    updatedBlog.user = {\n      id: blog.user.id,\n      name : blog.user.name ,\n      username : blog.user.username\n    }\n\n    // Updating state of blogs with new change\n    setBlogs(blogs.map(blog => blog.id === updatedBlog.id ? updatedBlog : blog))\n\n  }\n\n  // Get logged in user to enable delete button\n  let loggedUserJSON = JSON.parse(window.localStorage.getItem('loggedBlogUser'))\n\n  if (!loggedUserJSON) {\n    loggedUserJSON = { username : '' }\n  }\n\n  // Handle delete of blog\n  const handleDelete = async () => {\n\n    if (window.confirm(`Remove blog ${blog.title} by ${blog.author}`)) {\n      await blogService.deleteBlog(blog.id)\n\n      setBlogs(blogs.filter(newblog => newblog.id !== blog.id))\n    }\n  }\n\n  return(\n    <div style={Blogstyle}>\n      <i>Blog Title:</i> {blog.title} - <i>written by:</i> {blog.author}\n      <button id='viewButton' onClick={ toggleVisibility }>{visible ? 'hide' : 'view'}</button>\n      <div style={showDetails} className='hiddenDefault'>\n        <div>{blog.url}</div>\n        <div className='likeInfo'>Likes: { blog.likes } <button id='likeButton' onClick={ handleLike }>like</button></div>\n        <div>{blog.user.name}</div>\n        { blog.user.username === loggedUserJSON.username && <div><button id='deleteBlog' onClick={ handleDelete }>remove</button></div> }\n      </div>\n    </div>\n  )\n}\n\nBlog.propTypes = {\n  blog: PropTypes.object.isRequired,\n  blogs: PropTypes.array.isRequired,\n  setBlogs: PropTypes.func.isRequired\n}\n\nexport default Blog","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nconst Notification = () => {\n\n  const message = useSelector(state => state)\n\n  if (message === '') {\n    return null\n  }\n\n  let messageType = ''\n  if (message.includes('wrong')) {\n    messageType = 'failure'\n  } else {\n    messageType = 'success'\n  }\n\n  return (\n    <div className={messageType}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/login'\n// const baseUrl = 'http://localhost:3003/api/login'\n\nconst login = async (credentials) => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nconst Login = {\n  login\n}\n\nexport default Login","import React from 'react'\nimport Notification from './Notification'\nimport blogService from '../services/blogs'\nimport loginService from '../services/login'\nimport PropTypes from 'prop-types'\nimport { useDispatch } from 'react-redux'\nimport { setNotification } from '../reducers/notificationReducer'\n\nconst LoginForm = ({ message,\n  messageType,\n  // setMessage,\n  // setMessageType,\n  setUser,\n  username,\n  password,\n  setUsername,\n  setPassword\n}) => {\n\n  const dispatch = useDispatch()\n\n  // Handling logging in functionality\n  const handleLogin = async (event) => {\n    event.preventDefault()\n\n    try {\n\n      const loggedIn = await loginService.login({\n        username, password\n      })\n      window.localStorage.setItem(\n        'loggedBlogUser', JSON.stringify(loggedIn)\n      )\n      blogService.setToken(loggedIn.token)\n      setUser(loggedIn)\n      setUsername('')\n      setPassword('')\n\n    } catch (exception) {\n\n      // Catching failed attempts at login\n      // setMessage('Wrong username or password')\n      // setMessageType('failure')\n\n      // setTimeout(() => {\n      //   setMessage(null)\n      //   setMessageType(null)\n      // }, 5000)\n\n      dispatch(setNotification('Wrong username or password'))\n\n    }\n  }\n\n  return (\n    <>\n      <form onSubmit={handleLogin}>\n        <h2>log into application</h2>\n        <Notification message={message} messageType={messageType} />\n        <div>\n            username <input\n            id='username'\n            type='text'\n            value={username}\n            name='Username'\n            onChange={({ target }) => setUsername(target.value)}\n          />\n          <br />\n        </div>\n        <div>\n            password\n          <input\n            id='password'\n            type='password'\n            value={password}\n            name='Password'\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button id='loginSubmit' type=\"submit\">login</button>\n      </form>\n    </>\n  )\n}\n\nLoginForm.propTypes = {\n  setMessageType: PropTypes.func.isRequired,\n  setMessage: PropTypes.func.isRequired,\n  setUser: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired,\n  setUsername: PropTypes.func.isRequired,\n  setPassword: PropTypes.func.isRequired,\n}\n\nexport default LoginForm","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  // Allow other components access to toggleVisibility function\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  )\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nTogglable.displayName = 'Togglable'\n\nexport default Togglable","import React, { useState } from 'react'\nimport blogService from '../services/blogs'\nimport PropTypes from 'prop-types'\n\nconst CreateBlog = ({ setBlogs, blogs, setMessage, setMessageType, clearForm }) => {\n\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const [url, setUrl] = useState('')\n\n  // Handle submission of front end blog entry\n  const handeSubmit = async (event) => {\n    event.preventDefault()\n\n    const submmitedBlog = await blogService.submitBlog({ title, author, url })\n    const currentUser = JSON.parse(window.localStorage.getItem('loggedBlogUser'))\n\n    // Add user information to blog list\n    submmitedBlog.user = {\n      id: submmitedBlog.user,\n      name : currentUser.name ,\n      username : currentUser.username\n    }\n\n    setBlogs(blogs.concat(submmitedBlog))\n    // Change visibility using other component\n    clearForm.current.toggleVisibility()\n    setTitle('')\n    setAuthor('')\n    setUrl('')\n    setMessage(`a new blog ${submmitedBlog.title} by ${submmitedBlog.author} added!`)\n    setMessageType('success')\n\n    setTimeout(() => {\n      setMessage(null)\n      setMessageType(null)\n    }, 5000)\n\n  }\n\n  return(\n    <>\n      <h2>create new</h2>\n      <form onSubmit={handeSubmit} >\n        <div>\n                title  <input value={title} id='title' onChange={({ target }) => setTitle(target.value) } />\n        </div>\n        <div>\n                author <input value={author} id='author' onChange={({ target }) => setAuthor(target.value) } />\n        </div>\n        <div>\n                url <input value={url} id='url' onChange={({ target }) => setUrl(target.value) } />\n        </div>\n        <br />\n        <button id='blogSubmit' type=\"submit\">save</button>\n      </form>\n    </>\n  )\n}\n\nCreateBlog.propTypes = {\n  setBlogs: PropTypes.func.isRequired,\n  blogs: PropTypes.array.isRequired,\n  setMessage: PropTypes.func.isRequired,\n  setMessageType: PropTypes.func.isRequired,\n  clearForm: PropTypes.object.isRequired,\n}\n\nexport default CreateBlog","import React, { useState, useEffect, useRef } from 'react'\nimport Blog from './components/Blog'\nimport LoginForm from './components/Login'\nimport Notification from './components/Notification'\nimport Togglable from './components/Togglable'\nimport CreateBlog from './components/CreateBlog'\nimport blogService from './services/blogs'\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([])\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  const [message, setMessage] = useState(null)\n  const [messageType, setMessageType] = useState(null)\n\n  // Get all the blogs initially and set to state\n  useEffect(() => {\n    blogService.getAll().then(blogs =>\n      setBlogs(blogs)\n    )\n  }, [])\n\n  // Get user if user is in local storage\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBlogUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n  }, [])\n\n  // Handle logout\n  const handleLogout = () => {\n    window.localStorage.removeItem('loggedBlogUser')\n    setUser(null)\n  }\n\n  const blogFormRef = useRef()\n\n  // .filter(blog => blog.user.username === user.username) // Filtering for logged in user\n\n  // Render blogs into browser\n  const blogList = () => {\n    return (\n      <div>\n        <h2>blogs</h2>\n        <Notification />\n        <p>Logged in as : {user.name}</p>\n        <div>\n          <button onClick={handleLogout}>Logout</button>\n        </div>\n        <br />\n        <div>\n          <Togglable buttonLabel='new note' ref={blogFormRef}>\n            <CreateBlog\n              setBlogs={setBlogs}\n              blogs={blogs}\n              setMessage={setMessage}\n              setMessageType={setMessageType}\n              clearForm={blogFormRef} />\n          </Togglable>\n        </div>\n        <br />\n        <div id='allBlogs'>\n          {blogs\n            .sort((a, b) => a.likes - b.likes).reverse()  // Sorting by likes\n            .map(blog =>\n              <Blog key={blog.id} blog={blog} blogs={blogs} setBlogs={setBlogs} updateBlog={blogService.updateBlog} />\n            )}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      {user === null ?\n        <LoginForm message={message} messageType={messageType} setMessage={setMessage} setMessageType={setMessageType}\n          setUser={setUser} username={username} password={password} setUsername={setUsername} setPassword={setPassword} />\n        :\n        blogList()\n      }\n    </>\n  )\n}\n\nexport default App","// import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport notificationReducer from './reducers/notificationReducer'\n\n// const reducer = ({\n//   'notification' : notificationReducer,\n// })\n\nconst store = createStore(\n  notificationReducer,\n  composeWithDevTools(applyMiddleware(thunk))\n)\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}